/**
* GNU LESSER GENERAL PUBLIC LICENSE
* Version 3, 29 June 2007
*
* Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
* Everyone is permitted to copy and distribute verbatim copies
* of this license document, but changing it is not allowed.
* WHYNOGROUP - WNG - WNL - WNA - WNH - WNR - WNC
* 2019-12-15 - https://api.whyno.group
*/

/**
* Here is a "wngApi" class allowing simple communication with your API
* server hosted by whynogroup.
* All requests made with this wrapper are made using curl.
*/

class wngApi {

  /**
  * The endpoint is defined in the class constructor, this
  * variable lets you know where your wrapper is supposed
  * to communicate.
  * @var string $en
  */
  #en                         = null;


  /**
  * This parameter makes it possible to store the user's
  * consumption key in order to reuse it later in the
  * communication protocol established by whynogroup.
  * @var string $ck
  */
  #ck                         = null;

  /**
  * This variable allows you to store additional
  * input parameters for APIs that require it.
  * @var array $input
  */
  #input                      = null;

  /**
  * It is an output variable, it distributes to
  * you the information that the wrapper obtained
  * from the API server.
  * @var array $out
  */
  out                        = null;

  /**
  * This is a parameter allowing to know to which
  * resource of the API server the wrapper should call.
  * @var string $path
  */
  #path                       = null;

  /**
  * This is a parameter allowing to know with which method
  * the wrapper should contact the API server.
  * @var string $method
  */
  #method                     = null;

  /**
  * [__construct] Initiates a new instance of the wng wrapper,
  * it requires two variables necessary for initialization.
  * @param string $en API server endpoint
  * @param string $ck User consumption key
  * @return array
  */
  constructor(en, ck) {
    this.#ck                    = ck;
    this.#en                    = en;

    return this.out;
  }

  /**
  * [code] Returns the return code that the API replied
  */
  code() {
    return this.out.status;
  }

  /**
  * [state] Returns the return status that the API has replied to
  */
  state() {
    return this.out.state;
  }

  /**
  * [get] Call API with GET method
  * @param  string $path Contains the URI of the resource to be called
  * @param  array  $in   Contains additional data in tabular form if applicable.
  * @return array
  */
  get(path, input = null) {
    this.#path                  = path;
    this.#input                 = input;
    this.#method                = "GET";

    this.callApi();

    return this.out.return;
  }

  /**
  * [put] Call API with PUT method
  * @param  string $path Contains the URI of the resource to be called
  * @param  array  $in   Contains additional data in tabular form if applicable.
  * @return array
  */
  put(path, input = null) {
    this.#path                  = path;
    this.#input                 = input;
    this.#method                = "PUT";

    this.callApi();

    return this.out.return;
  }

  /**
  * [post] Call API with POST method
  * @param  string $path Contains the URI of the resource to be called
  * @param  array  $in   Contains additional data in tabular form if applicable.
  * @return array
  */
  post(path, input = null) {
    this.#path                  = path;
    this.#input                 = input;
    this.#method                = "POST";

    this.callApi();

    return this.out.return;
  }

  /**
  * [delete] Call API with DELETE method
  * @param  string $path Contains the URI of the resource to be called
  * @param  array  $in   Contains additional data in tabular form if applicable.
  * @return array
  */
  delete(path, input = null) {
    this.#path                  = path;
    this.#input                 = input;
    this.#method                = "DELETE";

    this.callApi();

    return this.out.return;
  }

  /**
  * [callApi] This function allows the curl request to be made to
  * the API server with all the data to be transmitted.
  * @return array
  */
  callApi() {
  
    if(this.#input == null)
      var data = null;
    else
      var data = JSON.stringify(this.#input);

    var res = $.ajax({
      data: data,
      async: false,
      headers: {
          'cache-control'  : 'no-cache',
          'x-wng-consumer' :  this.#ck,
          'x-wng-endpoint' :  this.#en
      },
      contentType: false,
      processData: false,
      url: "https://" + this.#en + this.#path,
      method: this.#method,
      success: function (o) {
        return o;
      },
      error: function(o) {
        return o;
      }
    });
    this.out                 = res.responseJSON;
  }
}
